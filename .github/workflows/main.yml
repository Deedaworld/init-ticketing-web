# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: wy-app-CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
    - '.gitignore'
    - '.dockerignore'
  
jobs:
  Continuous_Integration:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set Variables
      id: set-var
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=wy-node" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
        echo "GIT_EMAIL=jydianasuh@gmail.com" >> $GITHUB_ENV
        echo "GIT_NAME=deedaworld" >> $GITHUB_ENV
    
    - name: Use Node.js v21.6
      uses: actions/setup-node@v3
      with:
        node-version: '21.6'
        cache: 'npm'

    - name: Setup Node.js environment
      run: |
        npm ci
        npm run build --if-present
        npm test

    - name: Docker Image Build
      id: build-image
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env. ECR_REPOSITORY }}:${{env.IMAGE_TAG}} .

    - name: Docker Image Push
      id: push-image
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}

    - name: Checkout Deployment Repository
      uses: actions/checkout@v3
      with:
        repository: deedaworld/wy-dep
        ref: main
        token: ${{ secrets.GH_TOKEN }}

    - name: k8s manifest update
      run: |
        sed -i "s@ \
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:.*@ \
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG}}@g" deployment.yml

    - name: Commit and Push
      run: |
        git config user.email ${{ env.GIT_EMAIL }}
        git config user.name ${{ env.GIT_NAME}}
        git add deployment.yml
        git commit -m "Update image tag"
        git push origin main

    - name: Notify Slack on Success
      if: success()
      id: slack-success
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "channel": "notification-cicd",
            "attachments": [
              {
                "color": "#36a64f", # 성공시 연두색
                "title": "${{ github.repository }}", # 제목은 깃헙 레포지토리
                "title_link": "https://github.com/${{github.repository}}", # 제목 클릭시 레포지토리로 이동
                "text": "GitHub Action 성공",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Tag",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  }
                ]      
              }
            ]  
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOL_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

